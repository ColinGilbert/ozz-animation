Ozz-animation sample: Animation keyframe optimization

1. Description
Execute ozz::animation::offline::AnimationOptimizer on a raw animation object to remove redundant keyframes (within a tolerance). Resources objects (a runtime skeleton and a raw animation) are loaded from ozz archives. This samples can display optimized and non-optimized version of the animation, as well as the difference between the two (aka the error generated by the optimizer). 

2. Concept
This sample loads ozz binary archive file (to read a RawAnimation and a runtime Skeleton). The RawAnimation object is then converted to a run-time object using animation builder utility.
Prior to the conversion, animation is optimized by removing redundant keyframes (within a tolerance). It uses ozz::animation::offline::AnimationOptimizer objects that takes as input a raw animation and outputs a new optimized one.

3. Sample usage
This samples allows to tweak animation key-frame optimization stage using "translation", "rotation" and "scale" sliders in the "Optimization tolerances" UI panel. Optimization result can be checked within the sample:
  - Optimization quality: 3 rendering mode are provided to check optimization quality:
    - "Non-optimized": Renders the animation as close as the raw version as possible. No tolerance optimization is performed.
    - "Optimized" (default): Result of the optimization pass, using sample tolerances.
    - "Difference": Renders only the difference between the optimized and raw animation. This makes easy to detect quality degradation.
  - Optimization quantity: Run-time animation size is displayed in the UI.
Some other parameters can be tuned from sample UI to affect animation playback:
  - Play/pause animation.
  - Fix animation time.
  - Set playback speed, which can be negative to go backward.

4. Implementation
  a. Loads Skeleton object from a file, using ozz archive utility.
  b. Import animation object:
    1. Import ozz::animation::offline::RawAnimation object , using ozz archive utility.. This RawAnimation is in an offline suitable format, meaning it can be programmatically modified: Add/remove keys, add/remove tracks, change duration, extract motion...
    2. Optimizes animation size by removing keyframes that are within a certain tolerance value. This is done with ozz::animation::offline::AnimationOptimizer which process a offline animation (RawAnimation), and outputs an new offline animation. Optimization tolerance values are translation (meter), rotation (radian) and scale (percentage).
    3. Convert the offline animation to a runtime format, using ozz::animation::offline::AnimationBuilder. This utility takes as input a RawAnimation and outputs a runtime ozz::animation::Animation. The runtime format is the one used for sampling. In opposition with the offline one, it cannot be edited/modified. It is optimized for runtime usage in term of memory layout (cache coherence for sampling) and footprint (compression scheme).
  c. The remaining code of the sample is to allocate runtime buffers and samples animation every frame. See playback sample for more details.